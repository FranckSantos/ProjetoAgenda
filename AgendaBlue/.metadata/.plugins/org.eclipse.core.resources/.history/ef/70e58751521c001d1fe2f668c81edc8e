package br.com.agenda.agenda.controller;

import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.http.ResponseEntity.BodyBuilder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.agenda.agenda.model.ContatoModel;
import br.com.agenda.agenda.repository.ContatoRepository;

@CrossOrigin
@RestController
@RequestMapping("/contato")
public class AgendaController {

	private List<ContatoModel> listaContatos = new ArrayList<>();

	@Autowired
	private ContatoRepository contRepository;
	
	
//	List All - http://localhost:8095/contactura
	@GetMapping("/list")
	public List<?> findAll(){
		return contRepository.findAll();
	}
	
	
//	Find By Id - http://localhost:8095/contactura/{id}
	//@GetMapping(value = "{/id}")
	@GetMapping("/{id}")
	public ResponseEntity<?> findById(@PathVariable Long id){
		return contRepository.findById(id)
				.map(record -> ResponseEntity.ok().body(record))
				.orElse(ResponseEntity.notFound().build());
	}
	
	
//	Create - http://localhost:8095/contactura
	@PostMapping("/")
	public ContatoModel create(@RequestBody ContatoModel contato){
		return contRepository.save(contato);
	}
	
	
//	Update - http://localhost:8095/contactura/{id}
	//@PutMapping(value = "{/id}")
	@PutMapping("/update/{id}")
	public ResponseEntity<?> update(@PathVariable Long id, 
			@RequestBody ContatoModel contato){
		return contRepository.findById(id)
				.map(record -> {
					record.setNome(contato.getNome());
					record.setEmail(contato.getEmail());
					record.setTelefone(contato.getTelefone());
					ContatoModel update = contRepository.save(record);
					return ResponseEntity.ok().body(update);
				}).orElse(ResponseEntity.notFound().build());
	}
	
	
	//Delete - http://localhost:8095/contactura/{id}
	//@DeleteMapping(path = {"{id}"})
	//@PreAuthorize("hasRole('ADMIN')")
	@DeleteMapping("/remover/{id}")
	public ResponseEntity<?> delete(@PathVariable Long id){
		return contRepository.findById(id)
		.map(record -> {
			contRepository.deleteById(id);
			return ResponseEntity.ok().body("Deletado com Sucesso!");
		}).orElse(((BodyBuilder) ResponseEntity.notFound()).body("Erro ao deletar contato"));
	}
	
	
	
	

/*//	@GetMapping("/")
//	public Contato contato() {
//		Contato contato = new Contato();
//		contato.setId(1L);
//		contato.setNome("Frank");
//		contato.setEmail("frank@gmail.com");
//		contato.setTelefone("995350334");
//		return contato;
//		
//	}

//	@GetMapping("/{id}")
//	public ContatoModel contato(@PathVariable("id") Long id) {
		System.out.println("O id é " + id);
//		Contato contato = new Contato();
//		contato.setId(1L);
//		contato.setNome("Frank");
//		contato.setEmail("frank@gmail.com");
//		contato.setTelefone("995350334");

		// Optional<ContatoModel> findContato = listaContatos.stream().filter(contato ->
		// contato.getId() == id).findFirst();
		Optional<ContatoModel> findContato = this.contRepository.findById(id);

		if (findContato.isPresent()) {
			return findContato.get();
		}
		return null;

	}

	@PostMapping("/")
	public ContatoModel create(@RequestBody ContatoModel contato) {
		return this.contRepository.save(contato);
//		listaContatos.add(contato);
//		return contato;
	}

	@GetMapping("/list")
	public List<ContatoModel> list() {
		return this.contRepository.findAll();
		// return listaContatos;
	}

	@GetMapping("/findByNome/{nome}")
	public List<ContatoModel> findByNome(@PathVariable("nome") String nome) {
		return this.contRepository.findByNome(nome);
		// return listaContatos;
	}

	@DeleteMapping("/remover/{id}")
	public void deleteById(@PathVariable("id") Long id) {
		if (contRepository.existsById(id)) {
			contRepository.deleteById(id);

		} else {
			System.out.println("Contato não encontrado.");
		}

	}
	
	@PutMapping("/update/{id}")
	public void updateById(@PathVariable("id") Long id) {
		if (contRepository.existsById(id)) {
			contRepository.updateContato(id );

		} else {
			System.out.println("Contato não encontrado.");
		}

	}*/
}
